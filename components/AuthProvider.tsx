import React, { useEffect, useState } from 'react';
import { View, ActivityIndicator, StyleSheet, Alert } from 'react-native';
import { useAuthStore } from '@/app/store/authStore';
import { notificationService } from '@/app/services/notificationService';

interface AuthProviderProps {
  children: React.ReactNode;
}

export default function AuthProvider({ children }: AuthProviderProps) {
  const [isInitializing, setIsInitializing] = useState(true);
  const { user } = useAuthStore();

  useEffect(() => {
    initializeAuth();
  }, [user?.id]);

  const initializeAuth = async () => {
    try {
      setIsInitializing(true);
      console.log("üîÑ Initialisation de l'authentification...");

      // Toujours enregistrer les notifications, m√™me sans utilisateur connect√©
      console.log('üîî Configuration des notifications push...');

      try {
        // Enregistrer le token Expo pour les notifications push
        let token = null;

        const userType = user?.role === 'driver' ? 'driver' : 'client';

        if (user) {
          console.log(
            'üë§ Utilisateur connect√© - enregistrement avec ID utilisateur:',
            user.id,
          );
          token = await notificationService.registerForPushNotifications(
            undefined,
            userType,
          );
        } else {
          console.log("üë§ Pas d'utilisateur connect√© - enregistrement anonyme");
          // En mode production sans utilisateur, ne pas essayer d'enregistrer
          if (__DEV__) {
            token = await notificationService.registerForPushNotifications();
          } else {
            console.log(
              "‚ö†Ô∏è Mode production: Pas d'enregistrement sans utilisateur",
            );
          }
        }

        if (token) {
          console.log('‚úÖ Token Expo g√©n√©r√©:', token.substring(0, 50) + '...');

          // Sauvegarder le token en base de donn√©es si utilisateur connect√©
          if (user && userType === 'client') {
            await saveClientToken(user.id, token);
          }

          // Test de notification locale en d√©veloppement
          if (__DEV__) {
            console.log('üß™ Test de notification en mode d√©veloppement...');
            // Test diff√©r√© uniquement en d√©veloppement
            if (__DEV__) {
              setTimeout(() => {
                notificationService.sendLocalNotification({
                  type: 'new_order',
                  orderId: 'test_dev_' + Date.now(),
                  clientName: 'Client Test Dev',
                  pickupAddress: 'Adresse de test',
                  deliveryAddress: 'Destination de test',
                  estimatedPrice: 500,
                  vehicleType: 'moto',
                });
              }, 2000);
            }
          }
        } else {
          console.log('‚ùå Impossible de g√©n√©rer le token de notification');
        }
      } catch (notifError) {
        console.error(
          '‚ùå Erreur lors de la configuration des notifications:',
          notifError,
        );
        // En production, ne pas afficher d'alert pour √©viter de bloquer l'utilisateur
        if (__DEV__) {
          console.log(
            '‚ö†Ô∏è Mode d√©veloppement: Configuration des notifications √©chou√©e',
          );
        } else {
          console.log(
            '‚ö†Ô∏è Mode production: Notifications non configur√©es, continuons sans elles',
          );
        }
      }
    } catch (error) {
      console.error(
        "‚ùå Erreur lors de l'initialisation de l'authentification:",
        error,
      );
      // Ne pas d√©connecter l'utilisateur en cas d'erreur de notification
      // L'app doit continuer √† fonctionner m√™me sans notifications
      console.log('üîÑ Application continue sans notifications push');
    } finally {
      setIsInitializing(false);
      console.log("‚úÖ Initialisation de l'authentification termin√©e");
    }
  };

  const saveClientToken = async (userId: string, token: string) => {
    try {
      console.log('üíæ Sauvegarde du token client pour:', userId);

      const { supabase } = await import('@/app/services/api');

      // V√©rifier d'abord si l'utilisateur existe
      const { data: existingUser, error: checkError } = await supabase
        .from('users')
        .select('id, expo_push_token')
        .eq('id', userId)
        .single();

      if (checkError) {
        console.error('‚ùå Utilisateur non trouv√©:', checkError);
        return;
      }

      // Mettre √† jour le token
      const { error } = await supabase
        .from('users')
        .update({
          expo_push_token: token,
          updated_at: new Date().toISOString(),
        })
        .eq('id', userId);

      if (error) {
        console.error(
          '‚ùå Erreur lors de la sauvegarde du token client:',
          error,
        );
      } else {
        console.log('‚úÖ Token client sauvegard√© en base de donn√©es');

        // V√©rification de la sauvegarde
        const { data: updatedUser } = await supabase
          .from('users')
          .select('expo_push_token')
          .eq('id', userId)
          .single();

        if (updatedUser?.expo_push_token === token) {
          console.log('‚úÖ V√©rification: Token sauvegard√© correctement');
        } else {
          console.log('‚ö†Ô∏è V√©rification: Token non sauvegard√© correctement');
        }
      }
    } catch (error) {
      console.error('Erreur lors de la sauvegarde du token client:', error);
    }
  };

  if (isInitializing) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#DC2626" />
      </View>
    );
  }

  return <>{children}</>;
}

const styles = StyleSheet.create({
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
  },
});
