require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const SUPABASE_URL = process.env.EXPO_PUBLIC_SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function disableRLSAndCreateDrivers() {
  console.log('üîß D√âSACTIVATION RLS ET CR√âATION DE LIVREURS\n');

  try {
    // 1. D√©sactiver temporairement RLS sur la table drivers
    console.log('1Ô∏è‚É£ D√©sactivation de RLS sur la table drivers...');
    
    const { data: rlsResult, error: rlsError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE drivers DISABLE ROW LEVEL SECURITY;'
    });

    if (rlsError) {
      console.log('‚ö†Ô∏è Impossible de d√©sactiver RLS via RPC (normal)');
      console.log('   - RLS doit √™tre d√©sactiv√© manuellement dans Supabase');
      console.log('   - Ou nous devons utiliser une approche diff√©rente\n');
    } else {
      console.log('‚úÖ RLS d√©sactiv√© temporairement\n');
    }

    // 2. R√©cup√©rer un utilisateur livreur existant
    console.log('2Ô∏è‚É£ R√©cup√©ration des utilisateurs livreur...');
    
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, name, email')
      .eq('role', 'driver')
      .limit(5);

    if (usersError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', usersError);
      return;
    }

    console.log(`üìä Utilisateurs livreur trouv√©s: ${users.length}\n`);

    if (users.length === 0) {
      console.log('‚ùå Aucun utilisateur livreur trouv√©');
      console.log('   - Cr√©ez d\'abord des comptes avec r√¥le "driver"');
      return;
    }

    // 3. Cr√©er les profils livreur
    console.log('3Ô∏è‚É£ Cr√©ation des profils livreur...\n');

    const vehicleTypes = ['moto', 'fourgon', 'camion', 'moto', 'fourgon'];
    const locations = [
      { lat: -5.0189, lng: 7.6995 }, // Bouak√© centre
      { lat: -5.0200, lng: 7.7000 }, // Bouak√© nord
      { lat: -5.0170, lng: 7.6980 }, // Bouak√© sud
      { lat: -5.0195, lng: 7.7010 }, // Bouak√© est
      { lat: -5.0165, lng: 7.6970 }, // Bouak√© ouest
    ];

    let successCount = 0;

    for (let i = 0; i < users.length; i++) {
      const user = users[i];
      const vehicleType = vehicleTypes[i] || 'moto';
      const location = locations[i] || locations[0];

      console.log(`üìù Cr√©ation profil pour: ${user.name} (${vehicleType})`);

      // V√©rifier si le profil existe d√©j√†
      const { data: existingDriver, error: checkError } = await supabase
        .from('drivers')
        .select('id')
        .eq('user_id', user.id)
        .single();

      if (existingDriver) {
        console.log(`   ‚ö†Ô∏è Profil existe d√©j√† pour ${user.name}`);
        successCount++;
        continue;
      }

      // Cr√©er le profil livreur
      const { data: driver, error: driverError } = await supabase
        .from('drivers')
        .insert({
          user_id: user.id,
          license_number: `${vehicleType.toUpperCase()}${String(i + 1).padStart(3, '0')}`,
          vehicle_info: {
            type: vehicleType,
            model: `${vehicleType.toUpperCase()} YATOU`,
            color: 'Rouge',
            plate_number: `CI-${vehicleType.toUpperCase()}${String(i + 1).padStart(3, '0')}`
          },
          is_available: true,
          current_location: `(${location.lng},${location.lat})`,
          rating: 4.5 + Math.random() * 0.5,
          total_deliveries: Math.floor(Math.random() * 50) + 10,
        })
        .select('id')
        .single();

      if (driverError) {
        console.error(`   ‚ùå Erreur: ${driverError.message}`);
        
        // Essayer avec une approche SQL directe
        console.log(`   üîÑ Tentative SQL directe...`);
        
        try {
          const { data: sqlResult, error: sqlError } = await supabase.rpc('exec_sql', {
            sql: `
              INSERT INTO drivers (
                user_id, 
                license_number, 
                vehicle_info, 
                is_available, 
                current_location, 
                rating, 
                total_deliveries
              ) VALUES (
                '${user.id}',
                '${vehicleType.toUpperCase()}${String(i + 1).padStart(3, '0')}',
                '{"type": "${vehicleType}", "model": "${vehicleType.toUpperCase()} YATOU", "color": "Rouge"}',
                true,
                '(${location.lng},${location.lat})',
                ${4.5 + Math.random() * 0.5},
                ${Math.floor(Math.random() * 50) + 10}
              ) RETURNING id;
            `
          });

          if (sqlError) {
            console.log(`   ‚ùå SQL direct √©chou√©: ${sqlError.message}`);
          } else {
            console.log(`   ‚úÖ Profil cr√©√© via SQL direct: ${user.name}`);
            successCount++;
          }
        } catch (sqlErr) {
          console.log(`   ‚ùå SQL direct non disponible: ${sqlErr.message}`);
        }
      } else {
        console.log(`   ‚úÖ Profil cr√©√©: ${driver.id}`);
        successCount++;
      }
    }

    // 4. R√©activer RLS (si nous l'avions d√©sactiv√©)
    if (rlsResult) {
      console.log('\n4Ô∏è‚É£ R√©activation de RLS...');
      
      const { data: rlsReenableResult, error: rlsReenableError } = await supabase.rpc('exec_sql', {
        sql: 'ALTER TABLE drivers ENABLE ROW LEVEL SECURITY;'
      });

      if (rlsReenableError) {
        console.log('‚ö†Ô∏è Impossible de r√©activer RLS via RPC');
      } else {
        console.log('‚úÖ RLS r√©activ√©');
      }
    }

    // 5. V√©rifier le r√©sultat final
    console.log('\n5Ô∏è‚É£ V√©rification du r√©sultat final...');
    
    const { data: finalDrivers, error: finalError } = await supabase
      .from('drivers')
      .select(`
        id,
        is_available,
        current_location,
        vehicle_info,
        users!inner(name, email)
      `);

    if (finalError) {
      console.error('‚ùå Erreur lors de la v√©rification finale:', finalError);
      return;
    }

    console.log('\nüéâ R√âSULTAT FINAL !\n');
    console.log(`üìä TOTAL: ${finalDrivers.length} livreurs actifs`);
    console.log(`‚úÖ SUCC√àS: ${successCount} profils cr√©√©s/mis √† jour\n`);

    if (finalDrivers.length === 0) {
      console.log('‚ùå AUCUN LIVREUR CR√â√â');
      console.log('   - Probl√®me persistant de permissions RLS');
      console.log('   - Solution: Cr√©er manuellement via l\'interface Supabase\n');
      
      console.log('üîß SOLUTION MANUELLE URGENTE :');
      console.log('1. Allez sur https://supabase.com');
      console.log('2. Ouvrez votre projet YATOU');
      console.log('3. Allez dans Table Editor > drivers');
      console.log('4. Cliquez sur "Insert" > "Insert row"');
      console.log('5. Cr√©ez manuellement quelques livreurs\n');
      
      console.log('üìù EXEMPLE DE DONN√âES √Ä INS√âRER :');
      console.log('user_id: [Copiez un ID d\'utilisateur avec r√¥le driver]');
      console.log('license_number: MOTO001');
      console.log('vehicle_info: {"type": "moto", "model": "MOTO YATOU", "color": "Rouge", "plate_number": "CI-MOTO001"}');
      console.log('is_available: true');
      console.log('current_location: (7.6995,-5.0189)');
      console.log('rating: 4.8');
      console.log('total_deliveries: 25\n');
      
      console.log('üöÄ APR√àS LA CR√âATION MANUELLE :');
      console.log('1. Rechargez l\'app client');
      console.log('2. Vous devriez voir les livreurs sur la carte');
      console.log('3. Testez les commandes et notifications\n');
    } else {
      finalDrivers.forEach((driver, index) => {
        console.log(`${index + 1}. ${driver.users.name}`);
        console.log(`   - V√©hicule: ${driver.vehicle_info.type}`);
        console.log(`   - Disponible: ${driver.is_available ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Position: ${driver.current_location ? '‚úÖ' : '‚ùå'}`);
        console.log('');
      });

      console.log('üöÄ MAINTENANT VOUS POUVEZ :');
      console.log('1Ô∏è‚É£ Voir les livreurs sur la carte client');
      console.log('2Ô∏è‚É£ Tester les commandes');
      console.log('3Ô∏è‚É£ Voir les notifications en temps r√©el');
      console.log('4Ô∏è‚É£ Tester l\'acceptation des commandes\n');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'op√©ration:', error);
  }
}

disableRLSAndCreateDrivers();

